// =============================================================
// I. STRUCTURE: DOM References, Global Variables & Constants
// =============================================================

// --- A. DOM Elements ---
// HTML ‡§§‡§§‡•ç‡§µ‡•ã‡§Ç ‡§ï‡•á references
const postsList = document.getElementById("posts-list");
const showMoreBtn = document.getElementById("showMoreBtn");
const playBtn = document.getElementById("playBtn");

// --- B. Data & State Variables ---
// ‡§™‡•ã‡§∏‡•ç‡§ü‡•ç‡§∏ (posts) ‡§ï‡§æ array, ‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏, ‡§î‡§∞ pagination (‡§™‡•É‡§∑‡•ç‡§†‡§®) ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä
let posts = [
    "post-1.html", "imagepost.html", "post27sep.html", "post26sep.html", 
    "post25sep.html", "postdatalink.html", "postlink.html", "post9.html", 
    "post1.html", "post2.html", "post3.html", "post4.html", "post5.html", 
    "post6.html"
];
let currentIndex = 0;
const PAGE_SIZE = 3;

// --- C. Audio/Speech Variables ---
// Text-to-Speech (TTS) ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•ã ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§ö‡§∞
let selectedPostContent = ""; // ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§ñ‡•Å‡§≤‡•á ‡§™‡•ã‡§∏‡•ç‡§ü ‡§ï‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§™‡§æ‡§†
let currentSpeech = null;      // ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® SpeechSynthesisUtterance object
let isPlaying = false;         // ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç


// =============================================================
// II. LOGIC: Post Management
// =============================================================

/**
 * ‡§™‡•ã‡§∏‡•ç‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§Ö‡§ó‡§≤‡•á ‡§∏‡•á‡§ü ‡§ï‡•ã load ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§â‡§®‡•ç‡§π‡•á‡§Ç postsList ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡§§‡§æ ‡§π‡•à‡•§
 */
function loadPosts() {
  let nextIndex = Math.min(currentIndex + PAGE_SIZE, posts.length);
  const postsToLoad = posts.slice(currentIndex, nextIndex);
  
  // ‡§∏‡§≠‡•Ä ‡§™‡•ã‡§∏‡•ç‡§ü URLs ‡§ï‡•á ‡§≤‡§ø‡§è fetch promises ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à
  const fetchPromises = postsToLoad.map(postUrl => fetch(postUrl).then(res => res.text()));

  // ‡§∏‡§≠‡•Ä fetches ‡§ï‡•á ‡§™‡•Ç‡§∞‡§æ ‡§π‡•ã‡§®‡•á ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
  Promise.all(fetchPromises)
    .then(postContents => {
      postContents.forEach((data, i) => {
        let div = document.createElement("div");
        div.className = "post";
        
        // HTML ‡§∏‡•á ‡§∏‡§ø‡§∞‡•ç‡§´ text ‡§®‡§ø‡§ï‡§æ‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è temporary element ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó
        let tempEl = document.createElement("div");
        tempEl.innerHTML = data;
        let plainText = tempEl.innerText.substring(0, 150) + "...";

        // HTML structure ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§®‡§æ (Share button ‡§π‡§ü‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à)
        div.innerHTML = `
          <h2>Top Headline</h2> 
          <p class="content">${plainText}</p>
          <span class="read-more" data-index="${currentIndex + i}">Read More</span>
        `;
        
        postsList.appendChild(div);
      });
      
      // Index update ‡§ï‡§∞‡§®‡§æ ‡§î‡§∞ 'Show More' ‡§¨‡§ü‡§® ‡§õ‡§ø‡§™‡§æ‡§®‡§æ ‡§Ö‡§ó‡§∞ ‡§∏‡§≠‡•Ä ‡§™‡•ã‡§∏‡•ç‡§ü ‡§≤‡•ã‡§° ‡§π‡•ã ‡§ó‡§è ‡§π‡•ã‡§Ç
      currentIndex = nextIndex;
      if (currentIndex >= posts.length) showMoreBtn.style.display = "none";
    })
    .catch(error => console.error("Error loading posts:", error));
}

/**
 * 'Read More' ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ full post content ‡§ï‡•ã load ‡§î‡§∞ display ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
 * @param {number} index - posts array ‡§Æ‡•á‡§Ç ‡§™‡•ã‡§∏‡•ç‡§ü ‡§ï‡§æ ‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏‡•§
 * @param {HTMLElement} element - ‡§™‡•ã‡§∏‡•ç‡§ü ‡§ï‡§Ç‡§ü‡•á‡§®‡§∞ element‡•§
 */
function openPost(index, element) {
  fetch(posts[index])
    .then(res => res.text())
    .then(data => {
      // ‡§Ö‡§®‡•ç‡§Ø ‡§∏‡§≠‡•Ä ‡§™‡•ã‡§∏‡•ç‡§ü‡•ç‡§∏ ‡§ï‡•ã collapse ‡§ï‡§∞‡§®‡§æ
      document.querySelectorAll(".post").forEach(p => {
        p.classList.remove("active");
        let content = p.querySelector(".content");
        let readMore = p.querySelector(".read-more");
        if (readMore) readMore.style.display = "inline";
        // Note: full/preview text reset logic ‡§Ø‡§π‡§æ‡§Å ‡§ú‡•ã‡§°‡§º‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à ‡§Ö‡§ó‡§∞ ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•ã
      });

      // HTML content ‡§ï‡•ã parse ‡§î‡§∞ filter ‡§ï‡§∞‡§®‡§æ
      let tempEl = document.createElement("div");
      tempEl.innerHTML = data;
      let allowedTags = ["P","H1","H2","H3","H4","H5","H6","IMG","UL","OL","LI"];
      let displayContent = document.createElement("div");
      
      // Allowed tags filtering logic
      tempEl.childNodes.forEach(node => {
        if (node.nodeType === 1 && allowedTags.includes(node.tagName)) {
          displayContent.appendChild(node.cloneNode(true));
        } else if (node.nodeType === 3 && node.textContent.trim() !== "") {
          let p = document.createElement("p");
          p.textContent = node.textContent;
          displayContent.appendChild(p);
        }
      });
      
      // full content display ‡§ï‡§∞‡§®‡§æ
      let contentEl = element.querySelector(".content");
      contentEl.innerHTML = "";
      contentEl.appendChild(displayContent);

      element.querySelector(".read-more").style.display = "none";
      element.classList.add("active");

      // Audio ‡§ï‡•á ‡§≤‡§ø‡§è full text save ‡§ï‡§∞‡§®‡§æ
      selectedPostContent = tempEl.innerText;

      // ‡§Ö‡§ó‡§∞ ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à, ‡§§‡•ã ‡§®‡§Ø‡§æ ‡§™‡•ã‡§∏‡•ç‡§ü ‡§™‡§¢‡§º‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡§æ
      if (isPlaying) {
        stopAudio();
        startReading(selectedPostContent);
      }
    });
}


// =============================================================
// III. LOGIC: Text-to-Speech (Audio)
// =============================================================

/**
 * ‡§¶‡§ø‡§è ‡§ó‡§è text ‡§ï‡•ã ‡§™‡§¢‡§º‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
 * @param {string} text - ‡§™‡§¢‡§º‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§æ‡§†‡•§
 */
function startReading(text) {
  if (!("speechSynthesis" in window)) {
    alert("‡§Æ‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç, ‡§Ü‡§™‡§ï‡§æ ‡§°‡§ø‡§µ‡§æ‡§á‡§∏ ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ‡•§");
    return;
  }

  if (isPlaying) stopAudio();

  currentSpeech = new SpeechSynthesisUtterance(text);
  currentSpeech.lang = "hi-IN";

  currentSpeech.onend = () => {
    isPlaying = false;
    playBtn.textContent = "üé§ Play";
  };

  speechSynthesis.speak(currentSpeech);
  isPlaying = true;
  playBtn.textContent = "‚èπ Stop";
}

/**
 * ‡§è‡§ï ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü element ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§ï‡•á post ‡§ï‡•á ‡§¨‡§æ‡§ï‡•Ä content ‡§ï‡•ã ‡§™‡§¢‡§º‡§§‡§æ ‡§π‡•à‡•§
 * @param {HTMLElement} element - ‡§µ‡§π element ‡§ú‡§π‡§æ‡§Å ‡§∏‡•á ‡§™‡§¢‡§º‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡§æ ‡§π‡•à‡•§
 */
function startReadingFromElement(element) {
  if (!("speechSynthesis" in window)) {
    alert("‡§Æ‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç, ‡§Ü‡§™‡§ï‡§æ ‡§°‡§ø‡§µ‡§æ‡§á‡§∏ ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ‡•§");
    return;
  }
  if (!element) return;

  if (isPlaying) stopAudio();

  let text = "";
  let node = element;

  // ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® element ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§ï‡•á ‡§â‡§∏‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ï‡•á ‡§∏‡§≠‡•Ä siblings ‡§ï‡§æ text ‡§≤‡•á‡§§‡§æ ‡§π‡•à
  while (node && node.closest(".post")) { 
    text += node.innerText + "\n";
    node = node.nextElementSibling;
  }

  startReading(text);
}

/**
 * ‡§ö‡§≤ ‡§∞‡§π‡•á ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§ï‡•ã ‡§∞‡•ã‡§ï‡§§‡§æ ‡§π‡•à‡•§
 */
function stopAudio() {
  if (speechSynthesis.speaking) speechSynthesis.cancel();
  isPlaying = false;
  playBtn.textContent = "üé§ Play";
}


// =============================================================
// IV. LOGIC: Event Listeners
// =============================================================

// --- A. Floating Mic Button ---
playBtn.addEventListener("click", () => {
  if (!("speechSynthesis" in window)) {
    alert("‡§Æ‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç, ‡§Ü‡§™‡§ï‡§æ ‡§°‡§ø‡§µ‡§æ‡§á‡§∏ ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ‡•§");
    return;
  }
  if (!selectedPostContent) {
    alert("‡§™‡§π‡§≤‡•á ‡§ï‡•ã‡§à ‡§™‡•ã‡§∏‡•ç‡§ü ‡§ñ‡•ã‡§≤‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§∏‡•Å‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç");
    return;
  }
  if (isPlaying) {
    stopAudio();
  } else {
    startReading(selectedPostContent);
  }
});

// --- B. Show More Button ---
showMoreBtn.addEventListener("click", loadPosts);

// --- C. Post List Delegation (Read More, Audio Play) ---
postsList.addEventListener("click", (e) => {
  const target = e.target;
  
  // 1. 'Read More' ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï
  if (target.classList.contains("read-more")) {
    let index = target.getAttribute("data-index");
    let parent = target.closest(".post");
    openPost(index, parent);
  }

  // 2. H1-H6, P, LI ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‚Üí ‡§µ‡§π‡§æ‡§Ç ‡§∏‡•á ‡§™‡§¢‡§º‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡§æ
  let allowedTags = ["H1","H2","H3","H4","H5","H6","P","LI"];
  if (allowedTags.includes(target.tagName)) {
    // ‡§Ö‡§ó‡§∞ ‡§°‡•á‡§ü‡§æ-‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü (data-text) ‡§π‡•à ‡§§‡•ã ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§â‡§∏‡•á ‡§™‡§¢‡§º‡•ã (‡§∂‡•â‡§∞‡•ç‡§ü ‡§ü‡•à‡§™)
    if (target.dataset.text) {
      startReading(target.dataset.text);
      e.preventDefault(); 
    } else {
      // ‡§Ö‡§ó‡§∞ data-text ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§¨‡§æ‡§ï‡•Ä content ‡§™‡§¢‡§º‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•ã
      startReadingFromElement(target);
    }
  }
});


// --- D. Post List Delegation (Long Press/Right Click for URL) ---
postsList.addEventListener("contextmenu", (e) => {
  const target = e.target;
  // ‡§Ö‡§ó‡§∞ LI ‡§Ø‡§æ H-‡§ü‡•à‡§ó ‡§™‡§∞ data-url ‡§π‡•à, ‡§§‡•ã right click ‡§™‡§∞ URL ‡§ñ‡•ã‡§≤‡•á‡§Ç
  if ((target.tagName === "LI" || target.tagName.startsWith("H")) && target.dataset.url) {
    e.preventDefault(); // Default context menu ‡§ï‡•ã ‡§∞‡•ã‡§ï‡•á‡§Ç
    window.open(target.dataset.url, "_blank"); // ‡§®‡§è ‡§ü‡•à‡§¨ ‡§Æ‡•á‡§Ç URL ‡§ñ‡•ã‡§≤‡•á‡§Ç
  }
});


// =============================================================
// V. INITIALIZATION
// =============================================================

// --- A. Initial load ---
loadPosts();
